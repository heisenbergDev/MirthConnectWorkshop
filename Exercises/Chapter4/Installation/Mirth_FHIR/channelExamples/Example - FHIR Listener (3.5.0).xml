<channel version="3.5.0">
  <id>1892f241-d643-4abb-b0af-b20b87e0cf12</id>
  <nextMetaDataId>8</nextMetaDataId>
  <name>FHIR Listener</name>
  <description>NOTE: This channel depends on the following variables being declared in the configuration map:

    fhirDBDriver: The JDBC Driver class to use when connecting to the FHIR database.
    fhirDBUrl: The JDBC connection URL to use when connecting to the FHIR database.
    fhirDBUsername: The username to use when connecting to the FHIR database.
    fhirDBPassword: The password to use when connecting to the FHIR database.
    fhirDBMaxRetries: The maximum amount of retry attempts when a database connection fails.

Some of the queries used are specific to PostgreSQL, and will require tweaking for other databases.</description>
  <revision>1</revision>
  <sourceConnector version="3.5.0">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.fhir.shared.FhirReceiverProperties" version="3.5.0">
      <pluginProperties>
        <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="3.5.0">
  <authType>NONE</authType>
        </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
      </pluginProperties>
      <listenerConnectorProperties version="3.5.0">
        <host>0.0.0.0</host>
        <port>9006</port>
      </listenerConnectorProperties>
      <sourceConnectorProperties version="3.5.0">
        <responseVariable>response</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <contextPath>dstu2</contextPath>
      <timeout>0</timeout>
      <conformanceTemplate>&lt;Conformance xmlns=&quot;http://hl7.org/fhir&quot;&gt;
    &lt;rest&gt;
        &lt;mode value=&quot;server&quot;/&gt;
        &lt;resource&gt;
            &lt;type value=&quot;AllergyIntolerance&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Appointment&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;AppointmentResponse&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;AuditEvent&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Basic&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Binary&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;BodySite&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Bundle&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;CarePlan&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Claim&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;ClaimResponse&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;ClinicalImpression&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Communication&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;CommunicationRequest&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Composition&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;ConceptMap&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Condition&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Conformance&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;DetectedIssue&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Coverage&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;DataElement&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Device&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;DeviceComponent&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;DeviceMetric&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;DeviceUseRequest&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;DeviceUseStatement&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;DiagnosticOrder&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;DiagnosticReport&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;DocumentManifest&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;DocumentReference&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;EligibilityRequest&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;EligibilityResponse&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Encounter&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;EnrollmentRequest&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;EnrollmentResponse&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;EpisodeOfCare&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;ExplanationOfBenefit&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;FamilyMemberHistory&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Flag&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Goal&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Group&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;HealthcareService&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;ImagingObjectSelection&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;ImagingStudy&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Patient&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
            &lt;searchParam&gt;
			 &lt;name value=&quot;identifier&quot;/&gt;
			 &lt;definition value=&quot;http://hl7.org/fhir/SearchParameter/patient-identifier&quot;/&gt;
			 &lt;type value=&quot;token&quot;/&gt;
			 &lt;documentation value=&quot;A patient identifier&quot;/&gt;
		  &lt;/searchParam&gt;
            &lt;searchParam&gt;
                &lt;name value=&quot;name&quot;/&gt;
                &lt;definition value=&quot;http://hl7.org/fhir/SearchParameter/Patient-name&quot;/&gt;
                &lt;type value=&quot;string&quot;/&gt;
                &lt;documentation value=&quot;Case insensitive and partial-value searching&quot;/&gt;
                &lt;modifier value=&quot;contains&quot;/&gt;
            &lt;/searchParam&gt;
            &lt;searchParam&gt;
                &lt;name value=&quot;family&quot;/&gt;
                &lt;definition value=&quot;http://hl7.org/fhir/SearchParameter/Patient-family&quot;/&gt;
                &lt;type value=&quot;string&quot;/&gt;
                &lt;documentation value=&quot;Case insensitive and partial-value searching&quot;/&gt;
                &lt;modifier value=&quot;contains&quot;/&gt;
            &lt;/searchParam&gt;
            &lt;searchParam&gt;
                &lt;name value=&quot;given&quot;/&gt;
                &lt;definition value=&quot;http://hl7.org/fhir/SearchParameter/Patient-given&quot;/&gt;
                &lt;type value=&quot;string&quot;/&gt;
                &lt;documentation value=&quot;Case insensitive and partial-value searching&quot;/&gt;
                &lt;modifier value=&quot;contains&quot;/&gt;
            &lt;/searchParam&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;RelatedPerson&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;RiskAssessment&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Schedule&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
		  &lt;searchParam&gt;
        		 &lt;name value=&quot;identifier&quot;/&gt;
        		 &lt;definition value=&quot;http://hl7.org/fhir/SearchParameter/schedule-identifier&quot;/&gt;
        		 &lt;type value=&quot;token&quot;/&gt;
        		 &lt;documentation value=&quot;A Schedule Identifier&quot;/&gt;
      	  &lt;/searchParam&gt;
      	  &lt;searchParam&gt;
        		 &lt;name value=&quot;actor&quot;/&gt;
        		 &lt;definition value=&quot;http://hl7.org/fhir/SearchParameter/schedule-actor&quot;/&gt;
        		 &lt;type value=&quot;reference&quot;/&gt;
        		 &lt;documentation value=&quot;The individual(HealthcareService, Practitioner, Location, ...) to find a Schedule for&quot;/&gt;
      	  &lt;/searchParam&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;SearchParameter&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Slot&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
		  &lt;searchParam&gt;
        		 &lt;name value=&quot;identifier&quot;/&gt;
        		 &lt;definition value=&quot;http://hl7.org/fhir/SearchParameter/slot-identifier&quot;/&gt;
        		 &lt;type value=&quot;token&quot;/&gt;
        		 &lt;documentation value=&quot;A Slot Identifier&quot;/&gt;
      	  &lt;/searchParam&gt;
      	  &lt;searchParam&gt;
        		 &lt;name value=&quot;schedule&quot;/&gt;
        		 &lt;definition value=&quot;http://hl7.org/fhir/SearchParameter/slot-schedule&quot;/&gt;
        		 &lt;type value=&quot;reference&quot;/&gt;
        		 &lt;documentation value=&quot;The Schedule Resource that we are seeking a slot within&quot;/&gt;
      	  &lt;/searchParam&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Specimen&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;StructureDefinition&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Subscription&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;Substance&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;SupplyRequest&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;SupplyDelivery&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;TestScript&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;ValueSet&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;resource&gt;
            &lt;type value=&quot;VisionPrescription&quot;/&gt;
            &lt;versioning value=&quot;versioned&quot;/&gt;
            &lt;readHistory value=&quot;true&quot;/&gt;
            &lt;updateCreate value=&quot;true&quot;/&gt;
        &lt;/resource&gt;
        &lt;searchParam&gt;
            &lt;name value=&quot;_id&quot;/&gt;
            &lt;definition value=&quot;http://hl7.org/fhir/SearchParameter/resource-id&quot;/&gt;
            &lt;type value=&quot;token&quot;/&gt;
            &lt;documentation value=&quot;Logical id of this artifact&quot;/&gt;
        &lt;/searchParam&gt;
        &lt;searchParam&gt;
            &lt;name value=&quot;_lastUpdated&quot;/&gt;
            &lt;definition value=&quot;http://hl7.org/fhir/SearchParameter/resource-lastUpdated&quot;/&gt;
            &lt;type value=&quot;date&quot;/&gt;
            &lt;documentation value=&quot;When the resource version last changed&quot;/&gt;
            &lt;target value=&quot;Patient&quot;/&gt;
        &lt;/searchParam&gt;
    &lt;/rest&gt;
&lt;/Conformance&gt;</conformanceTemplate>
      <conformanceURL></conformanceURL>
      <conformanceName>Mirth Connect FHIR Server</conformanceName>
      <supportsXML>true</supportsXML>
      <supportsJSON>true</supportsJSON>
      <systemInteractions/>
      <resourceProperties>
        <disabledInteractions>
          <entry>
            <com.mirth.connect.connectors.fhir.shared.FhirResource>BINARY</com.mirth.connect.connectors.fhir.shared.FhirResource>
            <set>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            </set>
          </entry>
          <entry>
            <com.mirth.connect.connectors.fhir.shared.FhirResource>AUDIT_EVENT</com.mirth.connect.connectors.fhir.shared.FhirResource>
            <set>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            </set>
          </entry>
          <entry>
            <com.mirth.connect.connectors.fhir.shared.FhirResource>PARAMETERS</com.mirth.connect.connectors.fhir.shared.FhirResource>
            <set>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_CREATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_DELETE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_READ</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_INSTANCE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_SEARCH_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VALIDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_UPDATE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_HISTORY_TYPE</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
              <com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>FHIR_VREAD</com.mirth.connect.connectors.fhir.shared.FhirRestfulInteraction>
            </set>
          </entry>
        </disabledInteractions>
      </resourceProperties>
    </properties>
    <transformer version="3.5.0">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <name>Filter destinations by FHIR interaction</name>
          <sequenceNumber>0</sequenceNumber>
          <script>var interaction = sourceMap.get(&apos;fhirInteraction&apos;);

if (interaction == &apos;operation&apos; || interaction == &apos;validate&apos;) {
	// Operation destinations will have a name of &quot;$name&quot;.
	destinationSet.removeAllExcept([sourceMap.get(&apos;fhirOperationName&apos;)]);
} else if (interaction.startsWith(&apos;history&apos;)) {
	// This will match history-system, history-type, and history-instance
	destinationSet.removeAllExcept([&apos;history&apos;]);
} else if (interaction.startsWith(&apos;search&apos;)) {
	// This will match search-system and search-type
	destinationSet.removeAllExcept([&apos;search&apos;]);
} else {
	// All other destinations should have a name equal to the interaction
	destinationSet.removeAllExcept([interaction]);
}</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.mapper.MapperStep>
          <name>contentType</name>
          <sequenceNumber>1</sequenceNumber>
          <variable>contentType</variable>
          <mapping>sourceMap.get(&apos;headers&apos;).getHeader(&apos;Content-Type&apos;)</mapping>
          <defaultValue></defaultValue>
          <replacements/>
          <scope>CHANNEL</scope>
        </com.mirth.connect.plugins.mapper.MapperStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>XML</inboundDataType>
      <outboundDataType>XML</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.5.0">
      <elements/>
    </filter>
    <transportName>FHIR Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.5.0">
      <metaDataId>1</metaDataId>
      <name>create</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.5.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.5.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>try {
	var type = $(&apos;fhirType&apos;).toLowerCase();
	var id = UUIDGenerator.getUUID();
	var versionId = 1;
	var data = AttachmentUtil.reAttachMessage(connectorMessage);
	var contentType = $(&apos;contentType&apos;);
	var isFormatXML = !FhirUtil.isMIMETypeJSON(contentType || &apos;xml&apos;);
	var preferReturn = getPreferValue();

	if (type != &apos;binary&apos;) {
		var resource = isFormatXML ? FhirUtil.fromXML(data) : FhirUtil.fromJSON(data);
		var resourceIdElement = resource.getIdElement();

		if (resourceIdElement == null || resourceIdElement.getResourceType() == null) {
			return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, errorDetails, &apos;Resource type not specified, cannot be created as a(n) &apos; + $(&apos;fhirType&apos;) + &apos; resource.&apos;);
		} else if (resourceIdElement.getResourceType().toLowerCase() != type) {
			return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, errorDetails, &apos;Resource type &apos; + resourceIdElement.getResourceType() + &apos; cannot be created as a(n) &apos; + $(&apos;fhirType&apos;) + &apos; resource.&apos;);
		}

		// Always convert back to XML; Binary resources will already be XML.
		data = FhirUtil.toXML(resource).replaceAll(&apos;xmlns:?[^=]*\\s*=\\s*&quot;http://hl7.org/fhir&quot;&apos;, &apos;&apos;);
		contentType = FhirUtil.getMIMETypeXML();
	}

	var params = [type, id, versionId, data, contentType, $(&apos;method&apos;), $(&apos;url&apos;)];
	var result = executeUpdateAndGetGeneratedKeys(&quot;INSERT INTO resource (name, id, version, data, mimetype, request_method, request_url) VALUES (?, ?, ?, ?::XML, ?, ?, ?)&quot;, params);
	result.next();
	var sequenceId = result.getInt(1);

	result = executeCachedQuery(&quot;SELECT last_modified FROM resource WHERE sequence_id = ?&quot;, [sequenceId]);
	result.next();
	var lastModified = result.getDate(&apos;last_modified&apos;);

	var response;
	if (preferReturn == &apos;minimal&apos; || (!preferReturn &amp;&amp; type == &apos;binary&apos;)) {
		// If the Prefer header is set to minimal then don&apos;t send back the created resource
		response = FhirResponseFactory.getCreateResponse(id, versionId, lastModified, 201);
		if (preferReturn == &apos;minimal&apos;) {
			response.addHeader(&apos;Preference-Applied&apos;, &apos;return=minimal&apos;);
		}
	} else {
		if (!isFormatXML) {
			// Convert back to JSON before sending back
			data = FhirUtil.xmlToJSON(data);
			contentType = FhirUtil.getMIMETypeJSON();
		}
		response = FhirResponseFactory.getCreateResponse(data, id, versionId, lastModified, 201, contentType);
		if (preferReturn == &apos;representation&apos;) {
			response.addHeader(&apos;Preference-Applied&apos;, &apos;return=representation&apos;);
		}
	}
	
	responseMap.put(&apos;response&apos;, response);
	return response.getMessage();
} catch (e) {
	return createOperationOutcome(&apos;error&apos;, &apos;transient&apos;, &apos;Error creating resource.&apos;, 500, e);
}</script>
      </properties>
      <transformer version="3.5.0">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.5.0">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.5.0">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.5.0">
      <metaDataId>2</metaDataId>
      <name>update</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.5.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.5.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>try {
	var type = $(&apos;fhirType&apos;).toLowerCase();
	var id = $(&apos;fhirId&apos;);
	var versionId = 1;
	var data = AttachmentUtil.reAttachMessage(connectorMessage);
	var contentType = $(&apos;contentType&apos;);
	var responseCode = 201;
	var preferReturn = getPreferValue();
	var isFormatXML = !FhirUtil.isMIMETypeJSON(contentType || &apos;xml&apos;);

	if (type != &apos;binary&apos;) {
		var resource = isFormatXML ? FhirUtil.fromXML(data) : FhirUtil.fromJSON(data);
		var resourceIdElement = resource.getIdElement();
	
		if (resourceIdElement == null || resourceIdElement.getResourceType() == null) {
			return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Resource type unknown, cannot be updated as a(n) &apos; + $(&apos;fhirType&apos;) + &apos; resource.&apos;);
		} else if (resourceIdElement.getResourceType().toLowerCase() != type) {
			return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Resource type &apos; + resourceIdElement.getResourceType() + &apos; cannot be updated as a(n) &apos; + $(&apos;fhirType&apos;) + &apos; resource.&apos;);
		} else if (resourceIdElement.getIdPart() != id) {
			return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Resource ID &apos; + resourceIdElement.getIdPart() + &apos; does not match the ID in the request: &apos; + id);
		}

		// Always convert back to XML; Binary resources will already be XML.
		data = FhirUtil.toXML(resource).replaceAll(&apos;xmlns:?[^=]*\\s*=\\s*&quot;http://hl7.org/fhir&quot;&apos;, &apos;&apos;);
		contentType = FhirUtil.getMIMETypeXML();
	}

	var params = [type, id];
	var result = executeCachedQuery(&quot;SELECT version FROM resource WHERE name = ? AND id = ? ORDER BY version DESC LIMIT 1 FOR UPDATE&quot;, params);
	if (result.next()) {
		versionId = result.getInt(1) + 1;
		responseCode = 200;
	}

	params = [type, id, versionId, data, contentType, $(&apos;method&apos;), $(&apos;url&apos;)];
	result = executeUpdateAndGetGeneratedKeys(&quot;INSERT INTO resource (name, id, version, data, mimetype, request_method, request_url) VALUES (?, ?, ?, ?::XML, ?, ?, ?)&quot;, params);
	result.next();
	var sequenceId = result.getInt(1);

	result = executeCachedQuery(&quot;SELECT last_modified FROM resource WHERE sequence_id = ?&quot;, [sequenceId]);
	result.next();
	var lastModified = result.getDate(&apos;last_modified&apos;);

	var response;
	if (preferReturn == &apos;minimal&apos; || (!preferReturn &amp;&amp; type == &apos;binary&apos;)) {
		// If the Prefer header is set to minimal then don&apos;t send back the created resource
		response = FhirResponseFactory.getUpdateResponse(versionId, lastModified, responseCode);
		if (preferReturn == &apos;minimal&apos;) {
			response.addHeader(&apos;Preference-Applied&apos;, &apos;return=minimal&apos;);
		}
	} else {
		if (!isFormatXML) {
			// Convert back to JSON before sending back
			data = FhirUtil.xmlToJSON(data);
			contentType = FhirUtil.getMIMETypeJSON();
		}
		response = FhirResponseFactory.getUpdateResponse(data, versionId, lastModified, responseCode, contentType);
		if (preferReturn == &apos;representation&apos;) {
			response.addHeader(&apos;Preference-Applied&apos;, &apos;return=representation&apos;);
		}
	}
	responseMap.put(&apos;response&apos;, response);
	return response.getMessage();
} catch (e) {
	return createOperationOutcome(&apos;error&apos;, &apos;transient&apos;, &apos;Error updating resource.&apos;, 500, e);
}</script>
      </properties>
      <transformer version="3.5.0">
        <elements/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.5.0">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.5.0">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.5.0">
      <metaDataId>3</metaDataId>
      <name>delete</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.5.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.5.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>try {
	var type = $(&apos;fhirType&apos;).toLowerCase();
	var id = $(&apos;fhirId&apos;);

	var params = [type, id];
	var result = executeCachedQuery(&quot;SELECT version, deleted FROM resource WHERE name = ? AND id = ? ORDER BY version DESC LIMIT 1 FOR UPDATE&quot;, params);
	var response;
	
	if (result.next() &amp;&amp; !result.getBoolean(&apos;deleted&apos;)) {
		var versionId = result.getInt(&apos;version&apos;) + 1;

		params = [type, id, versionId, $(&apos;method&apos;), $(&apos;url&apos;)];
		result = executeUpdateAndGetGeneratedKeys(&quot;INSERT INTO resource (name, id, version, deleted, request_method, request_url) VALUES (?, ?, ?, TRUE, ?, ?)&quot;, params);
		result.next();
		var sequenceId = result.getInt(1);
	
		result = executeCachedQuery(&quot;SELECT last_modified FROM resource WHERE sequence_id = ?&quot;, [sequenceId]);
		result.next();
		var lastModified = result.getDate(1);

		response = FhirResponseFactory.getDeleteResponse(versionId, lastModified, 204);
	} else {
		response = FhirResponseFactory.getDeleteResponse(null, null, 200);
	}

	responseMap.put(&apos;response&apos;, response);
} catch (e) {
	return createOperationOutcome(&apos;error&apos;, &apos;transient&apos;, &apos;Error deleting resource.&apos;, 500, e);
}</script>
      </properties>
      <transformer version="3.5.0">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.5.0">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>RAW</inboundDataType>
        <outboundDataType>RAW</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.5.0">
          <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.5.0">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.5.0">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.5.0">
      <metaDataId>4</metaDataId>
      <name>read</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.5.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.5.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>try {
	var type = $(&apos;fhirType&apos;).toLowerCase();
	var id = $(&apos;fhirId&apos;);
	
	var params = [type, id];
	var result = executeCachedQuery(&quot;SELECT version, data::TEXT, mimetype, last_modified, deleted FROM resource WHERE name = ? AND id = ? ORDER BY version DESC LIMIT 1&quot;, params);
	var response;
	
	if (result.next()) {
		var version = new String(result.getInt(&apos;version&apos;));
		var data = result.getString(&apos;data&apos;);
		var contentType = result.getString(&apos;mimetype&apos;);
		var lastModified = result.getDate(&apos;last_modified&apos;);
		var responseCode = result.getBoolean(&apos;deleted&apos;) ? 410 : 200;

		if (type == &apos;binary&apos;) {
			var resource = FhirUtil.fromXML(data);
			data = resource.getContentAsBase64();
			contentType = resource.getContentType();
		}
		
		response = FhirResponseFactory.getReadResponse(data, version, lastModified, responseCode, contentType);
	} else {
		return createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, $(&apos;fhirType&apos;) + &apos; ID &apos; + id + &apos; not found.&apos;, 404);
	}

	responseMap.put(&apos;response&apos;, response);
	return response.getMessage();
} catch (e) {
	return createOperationOutcome(&apos;error&apos;, &apos;transient&apos;, &apos;Error reading resource.&apos;, 500, e);
}</script>
      </properties>
      <transformer version="3.5.0">
        <elements/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.5.0">
        <elements/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.5.0">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.5.0">
      <metaDataId>5</metaDataId>
      <name>vread</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.5.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.5.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>try {
	var type = $(&apos;fhirType&apos;).toLowerCase();
	var id = $(&apos;fhirId&apos;);
	
	var params = [type, $(&apos;fhirId&apos;), parseInt($(&apos;fhirVid&apos;), 10)];
	var result = executeCachedQuery(&quot;SELECT data::TEXT, mimetype, last_modified, deleted FROM resource WHERE name = ? AND id = ? AND version = ?&quot;, params);
	var response;
	
	if (result.next()) {
		var data = result.getString(&apos;data&apos;);
		var contentType = result.getString(&apos;mimetype&apos;);
		var lastModified = result.getDate(&apos;last_modified&apos;);
		var responseCode = result.getBoolean(&apos;deleted&apos;) ? 410 : 200;

		if (type == &apos;binary&apos;) {
			var resource = FhirUtil.fromXML(data);
			data = resource.getContentAsBase64();
			contentType = resource.getContentType();
		}
		
		response = FhirResponseFactory.getVreadResponse(data, lastModified, responseCode, contentType);
	} else {
		return createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, $(&apos;fhirType&apos;) + &apos; ID &apos; + id + &apos; at version &apos; + $(&apos;fhirVid&apos;) + &apos; not found.&apos;, 404);
	}

	responseMap.put(&apos;response&apos;, response);
	return response.getMessage();
} catch (e) {
	return createOperationOutcome(&apos;error&apos;, &apos;transient&apos;, &apos;Error reading resource.&apos;, 500, e);
}</script>
      </properties>
      <transformer version="3.5.0">
        <elements/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.5.0">
        <elements/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.5.0">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.5.0">
      <metaDataId>6</metaDataId>
      <name>history</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.5.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.5.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>try {
	var type = $(&apos;fhirType&apos;).toLowerCase();
	var id = $(&apos;fhirId&apos;);
	var requestURL = $(&apos;url&apos;);
	if (!requestURL.endsWith(&apos;/&apos;)) {
		requestURL += &apos;/&apos;;
	}
	var requestURL = new java.net.URI(requestURL);
	var contentType = $(&apos;contentType&apos;);
	var isFormatXML = !FhirUtil.isMIMETypeJSON($(&apos;parameters&apos;).getParameter(&apos;_format&apos;) || contentType || &apos;xml&apos;);

	var _count = $(&apos;parameters&apos;).getParameter(&apos;_count&apos;);
	if (_count) {
		_count = parseInt(_count, 10);
		if (!_count) {
			return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Parameter _count formatted incorrectly: &apos; + $(&apos;parameters&apos;).getParameter(&apos;_count&apos;));
		}
	}
	
	var _since = $(&apos;parameters&apos;).getParameter(&apos;_since&apos;);
	if (_since) {
		try {
			_since = DateUtil.formatDate(&apos;yyyy-MM-dd HH:mm:ss.SSSX&apos;, new InstantDt(_since).getValue());
		} catch (e) {
			return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Parameter _since formatted incorrectly: &apos; + _since);
		}
	}

	// Build up the WHERE clause and prepared query parameters
	var whereParts = [];
	var params = [];
	
	if (type &amp;&amp; id) {
		// history-instance
		whereParts.push(&quot;name = ?&quot;);
		whereParts.push(&quot;id = ?&quot;);
		params.push(type);
		params.push(id);
	} else if (type) {
		// history-type
		whereParts.push(&quot;name = ?&quot;);
		params.push(type);
	}

	if (_since) {
		whereParts.push(&quot;last_modified &gt;= ?::TIMESTAMP WITH TIME ZONE&quot;);
		params.push(_since);
	}

	// Build up the actual query
	var query = &quot;SELECT name, id, version, data::TEXT, mimetype, deleted, request_method, request_url FROM resource&quot;;
	if (whereParts.length &gt; 0) {
		query += &quot; WHERE &quot; + whereParts.join(&quot; AND &quot;);
	}
	query += &quot; ORDER BY name ASC, id ASC, version DESC&quot;;
	if (_count &gt; 0) {
		query += &quot; LIMIT &quot; + _count;
	}
	
	var result = executeCachedQuery(query, params);
	var bundle = new Packages.ca.uhn.fhir.model.dstu2.resource.Bundle().setType(BundleTypeEnum.HISTORY_LIST);

	while (result.next()) {
		var entryType = result.getString(&apos;name&apos;);
		var entryId = result.getString(&apos;id&apos;);
		var entryVersion = result.getInt(&apos;version&apos;);
		var entryData = result.getString(&apos;data&apos;);
		var entryContentType = result.getString(&apos;mimetype&apos;);
		var entryDeleted = result.getBoolean(&apos;deleted&apos;);
		var entryRequestMethod = result.getString(&apos;request_method&apos;);
		var entryRequestURL = result.getString(&apos;request_url&apos;);
		
		var resourceType = ResourceTypeEnum.VALUESET_BINDER.fromCodeString(entryType);
		if (resourceType != null) {
			entryType = resourceType.getCode();
		}

		var request = new Packages.ca.uhn.fhir.model.dstu2.resource.Bundle.EntryRequest().setMethod(HTTPVerbEnum.valueOf(entryRequestMethod)).setUrl(entryRequestURL);
		var entry = bundle.addEntry().setRequest(request);
		
		if (!entryDeleted) {
			var relativeUrl = &apos;../&apos;;
			if (id) {
				relativeUrl += &apos;../&apos;;
			}
			entry.setFullUrl(requestURL.resolve(relativeUrl + entryId + &apos;/_history/&apos; + entryVersion).toString());
			entry.setResource(FhirUtil.fromXML(entryData));
		}
	}

	bundle.setTotal(bundle.getEntry().size());

	var message = isFormatXML ? FhirUtil.toXML(bundle) : FhirUtil.toJSON(bundle);
	var contentType = isFormatXML ? FhirUtil.getMIMETypeXML() : FhirUtil.getMIMETypeJSON();
	responseMap.put(&apos;response&apos;, FhirResponseFactory.getHistoryResponse(message, 200, contentType));
	return $r(&apos;response&apos;).getMessage();
} catch (e) {
	return createOperationOutcome(&apos;error&apos;, &apos;transient&apos;, &apos;Error retrieving resource history.&apos;, 500, e);
}</script>
      </properties>
      <transformer version="3.5.0">
        <elements/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.5.0">
        <elements/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.5.0">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.5.0">
      <metaDataId>7</metaDataId>
      <name>search</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.5.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.5.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>try {
	var type = $(&apos;fhirType&apos;).toLowerCase();
	var requestURL = $(&apos;url&apos;);
	if (!requestURL.endsWith(&apos;/&apos;)) {
		requestURL += &apos;/&apos;;
	}
	var requestURL = new java.net.URI(requestURL);
	var contentType = $(&apos;contentType&apos;);
	var isFormatXML = !FhirUtil.isMIMETypeJSON($(&apos;parameters&apos;).getParameter(&apos;_format&apos;) || contentType || &apos;xml&apos;);

	// Add more supported parameters as you see fit
	var supportedParameters = [
		// General
		&apos;_format&apos;,
		// All resources
		&apos;_id&apos;,
		&apos;_lastupdated&apos;,
		// Results
		&apos;_count&apos;,
	]

	// Add more supported parameters as you see fit
	var supportedTypeParameters = {
		patient: [
			&apos;identifier&apos;,
			&apos;name&apos;,
			&apos;given&apos;,
			&apos;family&apos;
		],
		schedule: [
			&apos;identifier&apos;,
			&apos;actor&apos;
		],
		slot: [
			&apos;identifier&apos;,
			&apos;schedule&apos;
		]
	}

	if (type) {
		var typeParameters = supportedTypeParameters[type.toLowerCase()];
		if (typeParameters) {
			for each (param in typeParameters) {
				supportedParameters.push(param);
			}
		}
	}

	// Reject requests with parameters that aren&apos;t supported
	for each (key in $(&apos;parameters&apos;).getKeys().toArray()) {
		if (supportedParameters.indexOf(key.toLowerCase()+&apos;&apos;) &lt; 0) {
			return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Unknown or unsupported parameter &apos; + key + &apos;.&apos;);
		}
	}

	var _id = $(&apos;parameters&apos;).getParameter(&apos;_id&apos;);

	var _lastUpdated = $(&apos;parameters&apos;).getParameter(&apos;_lastUpdated&apos;);
	if (_lastUpdated) {
		try {
			_lastUpdated = DateUtil.formatDate(&apos;yyyy-MM-dd HH:mm:ss.SSSX&apos;, new DateDt(_lastUpdated).getValue());
		} catch (e) {
			return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Parameter _lastUpdated formatted incorrectly: &apos; + _lastUpdated);
		}
	}

	var _count = $(&apos;parameters&apos;).getParameter(&apos;_count&apos;);
	if (_count) {
		_count = parseInt(_count, 10);
		if (!_count) {
			return createOperationOutcome(&apos;error&apos;, &apos;invalid&apos;, &apos;Parameter _count formatted incorrectly: &apos; + $(&apos;parameters&apos;).getParameter(&apos;_count&apos;));
		}
	}

	// Build up the WHERE clause and prepared query parameters
	var whereParts = [];
	var params = [];
	
	if (type) {
		// search-type
		whereParts.push(&quot; name = ?&quot;);
		params.push(type);
	}

	if (_id) {
		whereParts.push(&quot;id = ?&quot;);
		params.push(_id);
	}

	if (_lastUpdated) {
		whereParts.push(&quot;DATE_TRUNC(&apos;day&apos;, last_modified) = DATE_TRUNC(&apos;day&apos;, ?::TIMESTAMP WITH TIME ZONE)&quot;);
		params.push(_lastUpdated);
	}

	// Add resource-specific query expressions
	if (type == &apos;patient&apos;) {
		if ($(&apos;parameters&apos;).contains(&apos;identifier&apos;)) {
			addXPath(xpathSearch(&apos;/*/identifier&apos;, [&apos;value/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;identifier&apos;), true, true), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;name&apos;)) {
			addXPath(xpathSearch(&apos;/*/name&apos;, [&apos;family/@value&apos;, &apos;given/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;name&apos;)), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;family&apos;)) {
			addXPath(xpathSearch(&apos;/*/name&apos;, [&apos;family/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;family&apos;)), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;given&apos;)) {
			addXPath(xpathSearch(&apos;/*/name&apos;, [&apos;given/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;given&apos;)), whereParts, params);
		}
	} else if (type == &apos;schedule&apos;) {
		if ($(&apos;parameters&apos;).contains(&apos;identifier&apos;)) {
			addXPath(xpathSearch(&apos;/*/identifier&apos;, [&apos;value/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;identifier&apos;), true, true), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;actor&apos;)) {
			addXPath(xpathSearch(&apos;/*/actor&apos;, [&apos;reference/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;actor&apos;)), whereParts, params);
		}
	} else if (type == &apos;slot&apos;) {
		if ($(&apos;parameters&apos;).contains(&apos;identifier&apos;)) {
			addXPath(xpathSearch(&apos;/*/identifier&apos;, [&apos;value/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;identifier&apos;), true, true), whereParts, params);
		}
		if ($(&apos;parameters&apos;).contains(&apos;schedule&apos;)) {
			addXPath(xpathSearch(&apos;/*/schedule&apos;, [&apos;reference/@value&apos;], $(&apos;parameters&apos;).getParameter(&apos;schedule&apos;)), whereParts, params);
		}
	}

	// Build up the actual query
	var query = &quot;SELECT name, id, version, data::TEXT, mimetype, request_method, request_url FROM resource r1 WHERE version = (SELECT MAX(version) FROM resource r2 WHERE r2.name = r1.name AND r2.id = r1.id) AND (deleted IS NULL OR deleted = FALSE)&quot;;
	if (whereParts.length &gt; 0) {
		query += &quot; AND &quot; + whereParts.join(&quot; AND &quot;);
	}
	query += &quot; ORDER BY name ASC, id ASC, version DESC&quot;;
	if (_count &gt; 0) {
		query += &quot; LIMIT &quot; + _count;
	}
	
	var result = executeCachedQuery(query, params);
	var bundle = new Packages.ca.uhn.fhir.model.dstu2.resource.Bundle().setType(BundleTypeEnum.SEARCH_RESULTS);

	while (result.next()) {
		var entryType = result.getString(&apos;name&apos;);
		var entryId = result.getString(&apos;id&apos;);
		var entryVersion = result.getInt(&apos;version&apos;);
		var entryData = result.getString(&apos;data&apos;);
		var entryContentType = result.getString(&apos;mimetype&apos;);
		var entryRequestMethod = result.getString(&apos;request_method&apos;);
		var entryRequestURL = result.getString(&apos;request_url&apos;);

		var resourceType = ResourceTypeEnum.VALUESET_BINDER.fromCodeString(entryType);
		if (resourceType != null) {
			entryType = resourceType.getCode();
		}

		var request = new Packages.ca.uhn.fhir.model.dstu2.resource.Bundle.EntryRequest().setMethod(HTTPVerbEnum.valueOf(entryRequestMethod)).setUrl(entryRequestURL);
		var entry = bundle.addEntry().setRequest(request);
	
		var relativeUrl = &apos;&apos;;
		if ($(&apos;url&apos;).contains(&apos;_search&apos;) &amp;&amp; $(&apos;method&apos;) == &apos;POST&apos;) {
			relativeUrl = &apos;../&apos;;
		}
		entry.setFullUrl(requestURL.resolve(relativeUrl + entryId + &apos;/_history/&apos; + entryVersion).toString());
		entry.setResource(FhirUtil.fromXML(entryData));
	}

	bundle.setTotal(bundle.getEntry().size());;

	var message = isFormatXML ? FhirUtil.toXML(bundle) : FhirUtil.toJSON(bundle);
	contentType = isFormatXML ? FhirUtil.getMIMETypeXML() : FhirUtil.getMIMETypeJSON();
	responseMap.put(&apos;response&apos;, FhirResponseFactory.getHistoryResponse(message, 200, contentType));
	return $r(&apos;response&apos;).getMessage();
} catch (e) {
	return createOperationOutcome(&apos;error&apos;, &apos;transient&apos;, &apos;Error searching resources.&apos;, 500, e);
}

/**
	Creates an XPath search selector within the given base node.

	@param String base - The base path to select within.
	@param String[] nodes - An array of child nodes to select by (combined with OR operator).
	@param String value - The value to test.
	@param Boolean equals - If true, the test will be equality, otherwise it will be a contains.
	@param Boolean caseSensitive - If true, the contains test will match using case sensitivity.
	@return The built-up contains selector.
*/
function xpathSearch(base, nodes, value, equals, caseSensitive) {
	var search = base + &quot;[&quot;;
	value = new java.lang.String(value).replaceAll(&quot;&apos;&quot;, &quot;&apos;&apos;&quot;);
	if (!caseSensitive) {
		value = value.toLowerCase();
	}
	
	for (var i = 0; i &lt; nodes.length; i++) {
		var node = nodes[i];
		if (!caseSensitive) {
			node = xpathTranslate(node);
		}
		
		if (equals) {
			search += node + &quot; = &apos;&quot; + value + &quot;&apos;&quot;;
		} else {
			search += &quot;contains(&quot; + node + &quot;, &apos;&quot; + value + &quot;&apos;)&quot;;
		}
		
		if (i &lt; nodes.length - 1) {
			search += &quot; or &quot;;
		}
	}
	
	search += &quot;]&quot;;
	return search;
}

/**
	Wraps a value in the XPath translate method for case insensitive selecting.

	@param String value - The value to wrap.
	@return The translate method string.
*/
function xpathTranslate(value) {
	return &quot;translate(&quot; + value + &quot;, &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;, &apos;abcdefghijklmnopqrstuvwxyz&apos;)&quot;;
}

/**
	Adds an XPath existence test to the query WHERE clause.

	@param String xpath - The XPath selector string.
	@param String[] whereParts - The array of WHERE clause parts to add to.
	@param Object[] params - The array of prepared query parameters.
*/
function addXPath(xpath, whereParts, params) {
	whereParts.push(&quot;XPATH_EXISTS(?, data)&quot;);
	params.push(xpath);
}</script>
      </properties>
      <transformer version="3.5.0">
        <elements/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.5.0">
        <elements/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.5.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.5.0">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.5.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.5.0">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map

// Return an OperationOutcome if no destinations or anything else already handled the response
if (!responseMap.containsKey(&apos;response&apos;)) {
	if (sourceMap.get(&apos;fhirInteraction&apos;) == &apos;operation&apos;) {
		createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, &apos;Invalid or unsupported operation: &apos; + sourceMap.get(&apos;fhirOperationName&apos;));
	} else {
		createOperationOutcome(&apos;error&apos;, &apos;processing&apos;, &apos;Invalid request URI.&apos;);
	}
}
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.5.0">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>FHIR_TYPE</name>
        <type>STRING</type>
        <mappingName>fhirType</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>FHIR_INTERACTION</name>
        <type>STRING</type>
        <mappingName>fhirInteraction</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>FHIR_ID</name>
        <type>STRING</type>
        <mappingName>fhirId</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>FHIR_VID</name>
        <type>STRING</type>
        <mappingName>fhirVid</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>FHIR_OPERATION</name>
        <type>STRING</type>
        <mappingName>fhirOperationName</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.5.0">
      <className>com.mirth.connect.server.attachments.javascript.JavaScriptAttachmentHandlerProvider</className>
      <type>JavaScript</type>
      <properties>
        <entry>
          <string>javascript.script</string>
          <string>// If an incoming request includes a Binary resource, add an attachment for it
if (StringUtils.equalsIgnoreCase($(&apos;fhirType&apos;), &apos;Binary&apos;) &amp;&amp; StringUtils.isNotBlank(message)) {
	var contentType = $(&apos;headers&apos;).getHeader(&apos;Content-Type&apos;);
	var resource;
	
	if (StringUtils.equalsIgnoreCase(contentType, FhirUtil.getMIMETypeXML()) || StringUtils.equalsIgnoreCase(contentType, FhirUtil.getMIMETypeJSON())) {
		resource = FhirUtil.isMIMETypeXML(contentType) ? FhirUtil.fromXML(message) : FhirUtil.fromJSON(message);
		var attachmentId = addAttachment(resource.getContentAsBase64(), resource.getContentType()).getAttachmentId();
		resource.setContentAsBase64(attachmentId);
	} else {
		var attachmentId = addAttachment(message, contentType).getAttachmentId();
		resource = FhirUtil.createBinaryResource(attachmentId, contentType);
	}

	// Always return XML for Binary resources
	return FhirUtil.toXML(resource);
}

return message;</string>
        </entry>
      </properties>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1493065966843</time>
        <timezone>America/Los_Angeles</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="3.5.0">
        <id>a084db27-49e0-4c67-893b-ffcc9f1d6e94</id>
        <name>FHIR Helper Functions</name>
        <revision>1</revision>
        <lastModified>
          <time>1493062170019</time>
          <timezone>America/Los_Angeles</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>1892f241-d643-4abb-b0af-b20b87e0cf12</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="3.5.0">
            <id>0e158aa1-77ee-465c-bb7a-13f4c8ecda13</id>
            <name>Create FHIR OperationOutcome</name>
            <revision>1</revision>
            <lastModified>
              <time>1493062170443</time>
              <timezone>America/Los_Angeles</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Creates a FHIR OperationOutcome resource and adds it to the response map with the key &quot;response&quot;.

	@param {String} severity - Indicates whether the issue indicates a variation from successful
		processing. Values: fatal | error | warning | information
	@param {String} code - Describes the type of the issue. The system that creates an
		OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may
		additional provide its own code for the error in the details element. Values: invalid | security |
		processing | transient | informational
	@param {String} details - Additional details about the error. This may be a text description of
		the error, or a system code that identifies the error.
	@param {int} httpStatusCode - The HTTP status code to send back with the response. Defaults to 400
		if not specified.
	@param {Error} e - If included, this will be used to build up the response status message and
		error.
	@param {Boolean} isFormatXML - If true, the resource will be formatted in XML. Otherwise, it will
		be formatted in JSON. If not specified, it will attempt to find the _format parameter in the source
		map, or return XML.
	@return {Response} The created Response object.
*/
function createOperationOutcome(severity, code, details, httpStatusCode, e, isFormatXML) {
	if (!httpStatusCode) {
		httpStatusCode = 400;
	}

	if (!isFormatXML) {
		if ($s(&apos;parameters&apos;) &amp;&amp; $s(&apos;parameters&apos;).contains(&apos;_format&apos;)) {
			isFormatXML = !FhirUtil.isJSON($s(&apos;parameters&apos;).getParameter(&apos;_format&apos;));
		} else {
			isFormatXML = true;
		}
	}

	var outcome = FhirUtil.createOperationOutcome(severity, code, details);
	var message = isFormatXML ? FhirUtil.toXML(outcome) : FhirUtil.toJSON(outcome);
	responseMap.put(&apos;response&apos;, FhirResponseFactory.getResponse(message, httpStatusCode, isFormatXML ? FhirUtil.getMIMETypeXML() : FhirUtil.getMIMETypeJSON()));
	var response = new Response(message);
	response.setStatusMessage(severity.toUpperCase() + &apos; OperationOutcome created with status &apos; + httpStatusCode + &apos;.&apos;);

	if (httpStatusCode &gt;= 400) {
		response.setStatus(Status.ERROR);

		if (e) {
			var customMessage = &apos;Channel &apos; + channelName + &apos;: &apos;;
			if (e.rhinoException) {
				customMessage += &apos;Error on line &apos; + e.rhinoException.lineNumber() + &apos;: &apos;;
			}
			customMessage += e.toString();
	
			var errorContent = com.mirth.connect.util.ErrorMessageBuilder.buildErrorMessage(&apos;FHIR Listener&apos;, customMessage, e.javaException || null);
			if (e.javaException) {
				logger.error(errorContent, e.javaException);	
			} else {
				logger.error(errorContent);
			}
			response.setError(errorContent);
		}
	}

	return response;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>13e82aac-df07-463e-b8ca-8f4b98243618</id>
            <name>FHIR DB - Execute Cached Query</name>
            <revision>1</revision>
            <lastModified>
              <time>1493062170091</time>
              <timezone>America/Los_Angeles</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a prepared query on the FHIR database and returns a CachedRowSet.

	@param {String} expression - The prepared statement to be executed.
	@param {List} parameters - The parameters for the prepared statement.
	@return {CachedRowSet} The result of the query, as a CachedRowSet.
*/
function executeCachedQuery(expression, parameters) {
	return executeOperation(&apos;executeCachedQuery&apos;, expression, parameters);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>9ec9d96c-4ea4-4f1c-8520-b73782f36aed</id>
            <name>FHIR DB - Execute Cached Query and Get Keys</name>
            <revision>1</revision>
            <lastModified>
              <time>1493062170414</time>
              <timezone>America/Los_Angeles</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes an INSERT/UPDATE statement on the database and returns a CachedRowSet containing any
	generated keys.

	@param {String} expression - The prepared statement to be executed.
	@param {List} parameters - The parameters for the prepared statement.
	@return {CachedRowSet} A CachedRowSet containing any generated keys.
*/
function executeUpdateAndGetGeneratedKeys(expression, parameters) {
	return executeOperation(&apos;executeUpdateAndGetGeneratedKeys&apos;, expression, parameters);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>8960e710-4870-49ea-b952-63d2b74b7bbc</id>
            <name>FHIR DB - Execute Update</name>
            <revision>1</revision>
            <lastModified>
              <time>1493062170233</time>
              <timezone>America/Los_Angeles</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Executes a prepared INSERT/UPDATE statement on the database and returns the row count.

	@param {String} expression - The prepared statement to be executed.
	@param {List} parameters - The parameters for the prepared statement.
	@return {int} A count of the number of updated rows.
*/
function executeUpdate(expression, parameters) {
	return executeOperation(&apos;executeUpdate&apos;, expression, parameters);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>23d0fa52-0d56-4e9a-82a5-56a6a3d55e43</id>
            <name>FHIR DB - Get Connection</name>
            <revision>1</revision>
            <lastModified>
              <time>1493062170391</time>
              <timezone>America/Los_Angeles</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Retrieves the FHIR database connection from the global channel map, creating a new one if necessary.

	@param {Boolean} recreate - If true, the connection will always be closed and created anew.
	@return {DatabaseConnection} The database connection object.
*/
function getFHIRDBConnection(recreate) {
	var dbConn = $gc(&apos;dbConn&apos;);

	if (!dbConn || recreate) {
		if (dbConn) {
			try {
				dbConn.close();
			} catch (e) {}
		}
		dbConn = DatabaseConnectionFactory.createDatabaseConnection($(&apos;fhirDBDriver&apos;), $(&apos;fhirDBUrl&apos;), $(&apos;fhirDBUsername&apos;), $(&apos;fhirDBPassword&apos;));
		$gc(&apos;dbConn&apos;, dbConn);
	}

	return dbConn;
}

function executeOperation(operation, expression, parameters) {
	var dbConn = getFHIRDBConnection();
	var attempts = 0;
	var maxAttempts = NumberUtils.toInt($(&apos;fhirDBMaxRetries&apos;) + &apos;&apos;, 0) + 1;

	while (attempts &lt; maxAttempts) {
		attempts++;

		try {
			if (parameters) {
				for (var i in parameters) {
					var param = parameters[i];
					if (param instanceof Number) {
						parameters[i] = new java.lang.Integer(param);
					}
				}
				
				return dbConn[operation](expression, java.util.Arrays.asList(parameters));
			} else {
				return dbConn[operation](expression);
			}
		} catch (e) {
			logger.info(&apos;Error executing statement, checking if valid...&apos;);

			try {
				dbConn.executeCachedQuery(&apos;SELECT 1&apos;);
			} catch (e2) {
				logger.info(&apos;Connection invalid, recreating...&apos;);

				try {
					dbConn = getFHIRDBConnection(true);
				} catch (e3) {}
			}

			if (attempts &gt;= maxAttempts) {
				var errorMessage = &apos;Unable to execute statement.\n&apos;;
				errorMessage += &apos;Expression: &apos; + expression + &apos;\n&apos;;
				if (parameters) {
					errorMessage += &apos;Parameters: &apos; + java.util.Arrays.asList(parameters).toString();
				}
				logger.error(errorMessage, e.javaException);
				throw e;
			}

			java.lang.Thread.sleep(1000);
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>a9691b6e-b455-4789-b4d7-89bcc095a163</id>
            <name>Get Prefer Header Value</name>
            <revision>1</revision>
            <lastModified>
              <time>1493062170258</time>
              <timezone>America/Los_Angeles</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Returns the &quot;return&quot; element of the Prefer HTTP header if specified.

	@return {String} The &quot;return&quot; element of the Prefer header, or undefined if not present
*/
function getPreferValue() {
	var preferReturn;
	var preferHeader = $(&apos;headers&apos;).getHeader(&apos;Prefer&apos;);
	
	if (preferHeader) {
		for each (element in new org.apache.http.message.BasicHeader(&apos;Prefer&apos;, preferHeader).getElements()) {
			if (element.getName() == &apos;return&apos;) {
				preferReturn = element.getValue();
				break;
			}
		}
	}
	
	return preferReturn;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.5.0">
            <id>18c799ae-3553-40b0-b8cc-8898fbad5f7d</id>
            <name>Import Common Packages</name>
            <revision>1</revision>
            <lastModified>
              <time>1493062170472</time>
              <timezone>America/Los_Angeles</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>COMPILED_CODE</type>
              <code>/**
	Imports HAPI FHIR packages commonly used in the FHIR Listener channel.
*/
importPackage(Packages.ca.uhn.fhir.model.api);
importPackage(Packages.ca.uhn.fhir.model.base.resource);
importPackage(Packages.ca.uhn.fhir.model.primitive);
importPackage(Packages.ca.uhn.fhir.model.dstu2.composite);
importPackage(Packages.ca.uhn.fhir.model.dstu2.resource);
importPackage(Packages.ca.uhn.fhir.model.dstu2.valueset);
importPackage(org.apache.commons.lang3);
importPackage(org.apache.commons.lang3.math);</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
    <channelTags>
      <channelTag>
        <id>801da78a-5e23-458c-8771-2012cc1238f6</id>
        <name>FHIR</name>
        <channelIds>
          <string>1892f241-d643-4abb-b0af-b20b87e0cf12</string>
        </channelIds>
        <backgroundColor>
          <red>255</red>
          <green>0</green>
          <blue>0</blue>
          <alpha>255</alpha>
        </backgroundColor>
      </channelTag>
    </channelTags>
  </exportData>
</channel>